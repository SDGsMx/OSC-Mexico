{
    "collab_server" : "",
    "contents" : ".packages = c('lubridate', 'magrittr', 'ggvis', 'dplyr', 'tidyr', 'readr', 'rvest',\n              'ggplot2', 'stringr', 'ggthemes', 'googleVis', 'shiny', 'tibble', 'vcd', 'vcdExtra',\n              'GGally','curl','gdata','readxl','ggmap')\n\n# Install CRAN packages (if not already installed)\n.inst <- .packages %in% installed.packages()\nif(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])\n\n# Load packages into session \nlapply(.packages, require, character.only=TRUE)\n\n\nload <- function(con=con,name){\n  \"Función que descarga si y sólo si no existe un archivo \n    Si no existe, descarga y guarda el archivo.\"\n  #Check if exists\n  if (file.exists(paste0(\"./\",name,\".csv\"))){\n    data <- read_csv(paste0(\"./\",name,\".csv\"))}\n  else{\n    #Si no existe la descargamos\n    system(paste0(\"rm\", name,\".xls\"))\n    download.file(con,paste0(\"./\",name,\".xls\"),mode=\"wb\") \n    system(paste0(\"ssconvert ./\",name,\".xls ./\",name,\".csv\"))\n    data <- read_csv(paste0(\"./\",name,\".csv\"),skip = 30)\n    write.csv(data, paste0(\"./\",name,\".csv\"),row.names = FALSE)\n    }\n  return(data)\n}\n\n\nclean <- function(db){\n  dic <- read_csv(\"./dir163_dic.csv\")\n  colnames(db) <- dic$name\n\n  db<-remove_empty_rows(db)  \n  return(db)\n}\n\nremove_empty_rows <- function(db) {\n  db <- db %>% filter(Reduce(`+`, lapply(., is.na)) != ncol(.))\n  return(db)\n}\n\n\ngeocode_vector_process <- function(infile,vector){   \n\n  #initialise a dataframe to hold the results\n  geocoded <- data.frame()\n  # find out where to start in the address list (if the script was interrupted before):\n  startindex <- 1\n  #if a temp file exists - load it up and count the rows!\n  tempfilename <- paste0(infile, '_temp_geocoded.rds')\n  if (file.exists(tempfilename)){\n    print(\"Found temp file - resuming from index:\")\n    geocoded <- readRDS(tempfilename)\n    startindex <- nrow(geocoded)\n    print(startindex)\n  }\n  \n  # Start the geocoding process - address by address. geocode() function takes care of query speed limit.\n  for (ii in seq(startindex, length(vector))){\n    print(paste(\"Working on index\", ii, \"of\", length(vector)))\n    #query the google geocoder - this will pause here if we are over the limit.\n    result = getGeoDetails(vector[ii]) \n    print(result$status)     \n    result$index <- ii\n    #append the answer to the results file.\n    geocoded <- rbind(geocoded, result)\n    #save temporary results as we are going along\n    saveRDS(geocoded, tempfilename)\n  }\nreturn(geocoded)\n}\n\n\ngetGeoDetails <- function(address){   \n  #use the gecode function to query google servers\n  geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)\n  #now extract the bits that we need from the returned list\n  answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)\n  answer$status <- geo_reply$status\n  \n  #if we are over the query limit - want to pause for an hour\n  while(geo_reply$status == \"OVER_QUERY_LIMIT\"){\n    print(\"OVER QUERY LIMIT - Pausing for 1 hour at:\") \n    time <- Sys.time()\n    print(as.character(time))\n    Sys.sleep(60*60)\n    geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)\n    answer$status <- geo_reply$status\n  }\n  \n  #return Na's if we didn't get a match:\n  if (geo_reply$status != \"OK\"){\n    return(answer)\n  }   \n  #else, extract what we need from the Google server reply into a dataframe:\n  answer$lat <- geo_reply$results[[1]]$geometry$location$lat\n  answer$long <- geo_reply$results[[1]]$geometry$location$lng   \n  if (length(geo_reply$results[[1]]$types) > 0){\n    answer$accuracy <- geo_reply$results[[1]]$types[[1]]\n  }\n  answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')\n  answer$formatted_address <- geo_reply$results[[1]]$formatted_address\n  \n  return(answer)\n}",
    "created" : 1488246299701.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3016693373",
    "id" : "3833C3F2",
    "lastKnownWriteTime" : 1487536924,
    "last_content_update" : 1487536924,
    "path" : "~/workspace/organizaciones_sociedad_civil/analisis/utils.R",
    "project_path" : "utils.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}